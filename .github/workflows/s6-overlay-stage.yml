name: 构建s6基础镜像

on:
  workflow_dispatch:
      
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_BUILDKIT: 1
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKERHUB_REPOSITORY: ${{ secrets.DOCKER_USERNAME }}/s6-overlay-stage
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3

      - name: Buildx cache
        uses: actions/cache@v2
        id: buildx-cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx

      - name: Build
        run: |
          FULL_VERSION=$(curl https://api.github.com/repos/just-containers/s6-overlay/releases/latest | jq -r '.tag_name')
          RELEASE_SEMVER=$(printf "${FULL_VERSION}" | tr -d [vV])
          PATCH_SEMVER=$(printf "${RELEASE_SEMVER}" | cut -d '.' -f 1-3)
          MINOR_SEMVER=$(printf "${RELEASE_SEMVER}" | cut -d '.' -f 1-2)
          MAJOR_SEMVER=$(printf "${RELEASE_SEMVER}" | cut -d '.' -f 1)

          declare -a IMAGES

          echo "Build amd64"
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform linux/amd64 \
            --build-arg "S6_VERSION=${FULL_VERSION}" \
            --build-arg "S6_ARCH=amd64" \
            --tag "${DOCKERHUB_REPOSITORY}:latest-amd64" \
            --tag "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}-amd64" \
            --tag "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}-amd64" \
            --tag "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}-amd64" \
            --tag "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-amd64" \
            -f s6-overlay-stage/Dockerfile \
            .                                                             
          IMAGES+=( "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-amd64" )

          echo "Build 386"
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform linux/386 \
            --build-arg "S6_VERSION=${FULL_VERSION}" \
            --build-arg "S6_ARCH=x86" \
            --tag "${DOCKERHUB_REPOSITORY}:latest-386" \
            --tag "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}-386" \
            --tag "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}-386" \
            --tag "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}-386" \
            --tag "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-386" \
            -f s6-overlay-stage/Dockerfile \
            .
          IMAGES+=( "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-386" )

          echo "Build arm-v6"
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform linux/arm/v6 \
            --build-arg "S6_VERSION=${FULL_VERSION}" \
            --build-arg "S6_ARCH=arm" \
            --tag "${DOCKERHUB_REPOSITORY}:latest-arm-v6" \
            --tag "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}-arm-v6" \
            --tag "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}-arm-v6" \
            --tag "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}-arm-v6" \
            --tag "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v6" \
            -f s6-overlay-stage/Dockerfile \
            .
          IMAGES+=( "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v6" )

          echo "Build arm-v7"
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform linux/arm/v7 \
            --build-arg "S6_VERSION=${FULL_VERSION}" \
            --build-arg "S6_ARCH=armhf" \
            --tag "${DOCKERHUB_REPOSITORY}:latest-arm-v7" \
            --tag "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}-arm-v7" \
            --tag "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}-arm-v7" \
            --tag "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}-arm-v7" \
            --tag "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v7" \
            -f s6-overlay-stage/Dockerfile \
            .
          IMAGES+=( "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v7" )

          echo "Build arm64-v8"
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform linux/arm64/v8 \
            --build-arg "S6_VERSION=${FULL_VERSION}" \
            --build-arg "S6_ARCH=aarch64" \
            --tag "${DOCKERHUB_REPOSITORY}:latest-arm64-v8" \
            --tag "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}-arm64-v8" \
            --tag "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}-arm64-v8" \
            --tag "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}-arm64-v8" \
            --tag "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm64-v8" \
            -f s6-overlay-stage/Dockerfile \
            .
          IMAGES+=( "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm64-v8" )

          echo "Build ppc64le"
          docker buildx build \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --output "type=image,push=true" \
            --platform linux/ppc64le \
            --build-arg "S6_VERSION=${FULL_VERSION}" \
            --build-arg "S6_ARCH=ppc64le" \
            --tag "${DOCKERHUB_REPOSITORY}:latest-ppc64le" \
            --tag "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}-ppc64le" \
            --tag "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}-ppc64le" \
            --tag "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}-ppc64le" \
            --tag "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-ppc64le" \
            -f s6-overlay-stage/Dockerfile \
            .
          IMAGES+=( "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-ppc64le" )

          echo "Create manifest lists"
          docker manifest create "${DOCKERHUB_REPOSITORY}:latest" "${IMAGES[@]}"
          docker manifest create "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}" "${IMAGES[@]}"
          docker manifest create "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}" "${IMAGES[@]}"
          docker manifest create "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}" "${IMAGES[@]}"
          docker manifest create "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}" "${IMAGES[@]}"

          echo "Annotate manifest lists to add architecture variants that aren't picked up automatically"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:latest" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v6" --variant "v6"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v6" --variant "v6"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v6" --variant "v6"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v6" --variant "v6"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v6" --variant "v6"

          docker manifest annotate "${DOCKERHUB_REPOSITORY}:latest" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v7" --variant "v7"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v7" --variant "v7"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v7" --variant "v7"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v7" --variant "v7"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm-v7" --variant "v7"

          docker manifest annotate "${DOCKERHUB_REPOSITORY}:latest" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm64-v8" --variant "v8"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm64-v8" --variant "v8"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm64-v8" --variant "v8"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm64-v8" --variant "v8"
          docker manifest annotate "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}" "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}-arm64-v8" --variant "v8"

          echo "Push manifest lists & delete local copies"
          docker manifest push --purge "${DOCKERHUB_REPOSITORY}:${RELEASE_SEMVER}"
          docker manifest push --purge "${DOCKERHUB_REPOSITORY}:${PATCH_SEMVER}"
          docker manifest push --purge "${DOCKERHUB_REPOSITORY}:${MINOR_SEMVER}"
          docker manifest push --purge "${DOCKERHUB_REPOSITORY}:${MAJOR_SEMVER}"
          docker manifest push --purge "${DOCKERHUB_REPOSITORY}:latest"
